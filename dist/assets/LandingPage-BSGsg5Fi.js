import{i as ge,r as A,t as _e,a as se,c as ve,o as oe,n as K,u as N,w as Z,g as re,b as xe,d as be,e as R,s as we,f as Se,h as p,j as o,k as d,l as E,m as Y,p as J,q as ee,v as C,x as v,F as q,y as G,z as w,A as m,B as k,C as ke,D as ae}from"./index-SSna2YrV.js";const ie="/afshanaman81.github.io/logo.png";var Q=(e=>(e.UPDATE_SHOW="update:show",e.UPDATE_ACTION="update:action",e.UPDATE_SELECTED_OPTIONS="update:selectedOptions",e.UPDATE_MODEL_VALUE="update:modelValue",e.UPDATE_CLEAR_USER_DATA="update:clearUserData",e.SET_DETAILS="set:details",e.SELECT="select",e.SCROLL_TO="scroll:to",e))(Q||{});function le(e){return xe()?(be(e),!0):!1}function B(e){return typeof e=="function"?e():N(e)}const $e=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const Ce=Object.prototype.toString,Te=e=>Ce.call(e)==="[object Object]",ce=()=>{};function Ae(e,t){function n(...s){return new Promise((r,a)=>{Promise.resolve(e(()=>t.apply(this,s),{fn:t,thisArg:this,args:s})).then(r).catch(a)})}return n}const de=e=>e();function Ee(e=de){const t=A(!0);function n(){t.value=!1}function s(){t.value=!0}const r=(...a)=>{t.value&&e(...a)};return{isActive:se(t),pause:n,resume:s,eventFilter:r}}function Le(e){return re()}function De(...e){if(e.length!==1)return _e(...e);const t=e[0];return typeof t=="function"?se(ve(()=>({get:t,set:ce}))):A(t)}function Oe(e,t,n={}){const{eventFilter:s=de,...r}=n;return Z(e,Ae(s,t),r)}function Me(e,t,n={}){const{eventFilter:s,...r}=n,{eventFilter:a,pause:c,resume:l,isActive:u}=Ee(s);return{stop:Oe(e,t,{...r,eventFilter:a}),pause:c,resume:l,isActive:u}}function ue(e,t=!0,n){Le()?oe(e,n):t?e():K(e)}function Ne(e=!1,t={}){const{truthyValue:n=!0,falsyValue:s=!1}=t,r=ge(e),a=A(e);function c(l){if(arguments.length)return a.value=l,a.value;{const u=B(n);return a.value=a.value===u?B(s):u,a.value}}return r?c:[a,c]}const P=$e?window:void 0;function fe(e){var t;const n=B(e);return(t=n==null?void 0:n.$el)!=null?t:n}function te(...e){let t,n,s,r;if(typeof e[0]=="string"||Array.isArray(e[0])?([n,s,r]=e,t=P):[t,n,s,r]=e,!t)return ce;Array.isArray(n)||(n=[n]),Array.isArray(s)||(s=[s]);const a=[],c=()=>{a.forEach(x=>x()),a.length=0},l=(x,y,L,S)=>(x.addEventListener(y,L,S),()=>x.removeEventListener(y,L,S)),u=Z(()=>[fe(t),B(r)],([x,y])=>{if(c(),!x)return;const L=Te(y)?{...y}:y;a.push(...n.flatMap(S=>s.map($=>l(x,S,$,L))))},{immediate:!0,flush:"post"}),_=()=>{u(),c()};return le(_),_}function je(){const e=A(!1),t=re();return t&&oe(()=>{e.value=!0},t),e}function Re(e){const t=je();return R(()=>(t.value,!!e()))}function Be(e,t={}){const{window:n=P}=t,s=Re(()=>n&&"matchMedia"in n&&typeof n.matchMedia=="function");let r;const a=A(!1),c=_=>{a.value=_.matches},l=()=>{r&&("removeEventListener"in r?r.removeEventListener("change",c):r.removeListener(c))},u=Se(()=>{s.value&&(l(),r=n.matchMedia(B(e)),"addEventListener"in r?r.addEventListener("change",c):r.addListener(c),a.value=r.matches)});return le(()=>{u(),l(),r=void 0}),a}const H=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},U="__vueuse_ssr_handlers__",Pe=We();function We(){return U in H||(H[U]=H[U]||{}),H[U]}function pe(e,t){return Pe[e]||t}function me(e){return Be("(prefers-color-scheme: dark)",e)}function Ve(e){return e==null?"any":e instanceof Set?"set":e instanceof Map?"map":e instanceof Date?"date":typeof e=="boolean"?"boolean":typeof e=="string"?"string":typeof e=="object"?"object":Number.isNaN(e)?"any":"number"}const Fe={boolean:{read:e=>e==="true",write:e=>String(e)},object:{read:e=>JSON.parse(e),write:e=>JSON.stringify(e)},number:{read:e=>Number.parseFloat(e),write:e=>String(e)},any:{read:e=>e,write:e=>String(e)},string:{read:e=>e,write:e=>String(e)},map:{read:e=>new Map(JSON.parse(e)),write:e=>JSON.stringify(Array.from(e.entries()))},set:{read:e=>new Set(JSON.parse(e)),write:e=>JSON.stringify(Array.from(e))},date:{read:e=>new Date(e),write:e=>e.toISOString()}},ne="vueuse-storage";function Ie(e,t,n,s={}){var r;const{flush:a="pre",deep:c=!0,listenToStorageChanges:l=!0,writeDefaults:u=!0,mergeDefaults:_=!1,shallow:x,window:y=P,eventFilter:L,onError:S=i=>{console.error(i)},initOnMounted:$}=s,b=(x?we:A)(typeof t=="function"?t():t);if(!n)try{n=pe("getDefaultStorage",()=>{var i;return(i=P)==null?void 0:i.localStorage})()}catch(i){S(i)}if(!n)return b;const T=B(t),W=Ve(T),D=(r=s.serializer)!=null?r:Fe[W],{pause:I,resume:g}=Me(b,()=>z(b.value),{flush:a,deep:c,eventFilter:L});y&&l&&ue(()=>{n instanceof Storage?te(y,"storage",M):te(y,ne,V),$&&M()}),$||M();function O(i,f){if(y){const h={key:e,oldValue:i,newValue:f,storageArea:n};y.dispatchEvent(n instanceof Storage?new StorageEvent("storage",h):new CustomEvent(ne,{detail:h}))}}function z(i){try{const f=n.getItem(e);if(i==null)O(f,null),n.removeItem(e);else{const h=D.write(i);f!==h&&(n.setItem(e,h),O(f,h))}}catch(f){S(f)}}function j(i){const f=i?i.newValue:n.getItem(e);if(f==null)return u&&T!=null&&n.setItem(e,D.write(T)),T;if(!i&&_){const h=D.read(f);return typeof _=="function"?_(h,T):W==="object"&&!Array.isArray(h)?{...T,...h}:h}else return typeof f!="string"?f:D.read(f)}function M(i){if(!(i&&i.storageArea!==n)){if(i&&i.key==null){b.value=T;return}if(!(i&&i.key!==e)){I();try{(i==null?void 0:i.newValue)!==D.write(b.value)&&(b.value=j(i))}catch(f){S(f)}finally{i?K(g):g()}}}}function V(i){M(i.detail)}return b}const ze="*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";function He(e={}){const{selector:t="html",attribute:n="class",initialValue:s="auto",window:r=P,storage:a,storageKey:c="vueuse-color-scheme",listenToStorageChanges:l=!0,storageRef:u,emitAuto:_,disableTransition:x=!0}=e,y={auto:"",light:"light",dark:"dark",...e.modes||{}},L=me({window:r}),S=R(()=>L.value?"dark":"light"),$=u||(c==null?De(s):Ie(c,s,a,{window:r,listenToStorageChanges:l})),b=R(()=>$.value==="auto"?S.value:$.value),T=pe("updateHTMLAttrs",(g,O,z)=>{const j=typeof g=="string"?r==null?void 0:r.document.querySelector(g):fe(g);if(!j)return;const M=new Set,V=new Set;let i=null;if(O==="class"){const h=z.split(/\s/g);Object.values(y).flatMap(F=>(F||"").split(/\s/g)).filter(Boolean).forEach(F=>{h.includes(F)?M.add(F):V.add(F)})}else i={key:O,value:z};if(M.size===0&&V.size===0&&i===null)return;let f;x&&(f=r.document.createElement("style"),f.appendChild(document.createTextNode(ze)),r.document.head.appendChild(f));for(const h of M)j.classList.add(h);for(const h of V)j.classList.remove(h);i&&j.setAttribute(i.key,i.value),x&&(r.getComputedStyle(f).opacity,document.head.removeChild(f))});function W(g){var O;T(t,n,(O=y[g])!=null?O:g)}function D(g){e.onChanged?e.onChanged(g,W):W(g)}Z(b,D,{flush:"post",immediate:!0}),ue(()=>D(b.value));const I=R({get(){return _?$.value:b.value},set(g){$.value=g}});try{return Object.assign(I,{store:$,system:S,state:b})}catch{return I}}function Ue(e={}){const{valueDark:t="dark",valueLight:n="",window:s=P}=e,r=He({...e,onChanged:(l,u)=>{var _;e.onChanged?(_=e.onChanged)==null||_.call(e,l==="dark",u,l):u(l)},modes:{dark:t,light:n}}),a=R(()=>r.system?r.system.value:me({window:s}).value?"dark":"light");return R({get(){return r.value==="dark"},set(l){const u=l?"dark":"light";a.value===u?r.value="auto":r.value=u}})}function Je(e,t){return d(),p("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor","aria-hidden":"true","data-slot":"icon"},[o("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"})])}function qe(e,t){return d(),p("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor","aria-hidden":"true","data-slot":"icon"},[o("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"})])}const Ge={class:"float-left mr-4"},Qe={class:"float-right pt-1 text-pop-secondary"},Ke=E({__name:"ThemeToggle",setup(e){const t=Ue(),n=Ne(t);return(s,r)=>(d(),p("div",{onClick:r[0]||(r[0]=a=>N(n)()),class:"flow-root"},[o("p",Ge,[N(t)?(d(),Y(ee(N(Je)),{key:0,class:"w-6 shrink-0 text-pop-secondary","aria-hidden":"true"})):J("",!0),N(t)?J("",!0):(d(),Y(ee(N(qe)),{key:1,class:"w-6 shrink-0 text-pop-secondary","aria-hidden":"true"}))]),o("p",Qe,C(N(t)?"Go Light":"Go Dark")+" Theme ",1)]))}}),Ze={class:"w-full p-2 flex items-center justify-between border-b border-pop-secondary"},Xe={class:"hidden md:flex space-x-8 text-pop-secondary font-medium"},Ye=["onClick"],et=E({__name:"TopNavigation",emits:[Q.SCROLL_TO],setup(e,{emit:t}){const n=t,s=a=>{console.log("emiting",a),n(Q.SCROLL_TO,a)},r=[{name:"About",action:"about"},{name:"Team",action:"team"},{name:"Problem",action:"problem"},{name:"Solution",action:"solution"},{name:"Contact",action:"contact"}];return(a,c)=>(d(),p("nav",Ze,[c[0]||(c[0]=o("div",{class:"flex items-center"},[o("img",{src:ie,alt:"logo",class:"w-20 object-cover rounded-full"})],-1)),o("div",Xe,[(d(),p(q,null,G(r,l=>o("div",{key:l.name},[o("a",{href:"#",onClick:u=>s(l.action),class:"hover:text-pop-primary transition"},C(l.name),9,Ye)])),64)),v(Ke,{class:"ml-24"})])]))}}),he=(e,t)=>{const n=e.__vccOpts||e;for(const[s,r]of t)n[s]=r;return n},tt={},nt={class:"flex justify-center items-center"},st={class:"grid grid-cols-1 md:grid-cols-5 gap-10 items-center"},ot={class:"col-span-1 md:col-span-3 space-y-2 md:space-y-6"},rt={class:"text-4xl md:text-6xl font-bold text-pop-secondary leading-tight"},at={class:"flex space-x-12 text-pop-primary"},it={class:"text-lg md:text-2xl text-secondary/50"},lt={class:"col-span-1 md:col-span-2"};function ct(e,t){return d(),p("div",nt,[o("div",st,[o("div",ot,[o("h1",rt,[w(e.$slots,"title")]),o("div",at,[w(e.$slots,"subTitle")]),o("p",it,[w(e.$slots,"description")]),o("div",null,[w(e.$slots,"leftContent")])]),o("div",lt,[w(e.$slots,"rightContent")])])])}const ye=he(tt,[["render",ct]]),dt={class:"mt-24"},ut=E({__name:"Hero",setup(e){return(t,n)=>(d(),p("div",dt,[v(ye,null,{title:m(()=>n[0]||(n[0]=[k(" Explore the new personal assistant, workflows, and AI Agents ")])),subTitle:m(()=>n[1]||(n[1]=[o("div",{class:"flex space-x-12 text-pop-primary"},[o("i",{class:"fa-brands fa-galactic-senate text-6xl hover:text-pop-secondary"}),o("i",{class:"fa-brands fa-fulcrum text-6xl hover:text-pop-secondary"}),o("i",{class:"fa-brands fa-swift text-6xl hover:text-pop-secondary hidden lg:flex"}),o("i",{class:"fa-brands fa-studiovinari text-6xl hover:text-pop-secondary"}),o("i",{class:"fa-brands fa-yammer text-6xl hover:text-pop-secondary hidden lg:flex"}),o("i",{class:"fa-brands fa-napster text-6xl hover:text-pop-secondary"}),o("i",{class:"fa-brands fa-suse text-6xl hover:text-pop-secondary hidden lg:flex"})],-1)])),description:m(()=>n[2]||(n[2]=[k(" Our AI tools can help you run your business more efficiently and with peace of mind ")])),leftContent:m(()=>n[3]||(n[3]=[o("button",{class:"px-6 py-3 rounded-lg text-lg font-semibold bg-pop-secondary/50 hover:bg-pop-primary text-secondary hover:text-primary transition shadow-lg"}," GET STARTED ",-1),o("div",{class:"mt-5"},[o("p",{class:"text-pop-primary mb-2"}," Trusted by 10+ individuals and SMEs worldwide ")],-1)])),rightContent:m(()=>n[4]||(n[4]=[o("img",{src:ie,alt:"logo",class:"w-full rounded-full"},null,-1)])),_:1})]))}}),ft={class:"flex flex-col h-full items-center text-secondary bg-primary rounded-md"},pt={class:"-mt-20 border-8 rounded-full overflow-hidden border-pop-secondary"},mt=["src"],ht={class:"mt-4 text-xl font-semibold text-pop-primary"},yt={class:"mt-1 py-1 px-2 text-sm text-pop-secondary bg-primary/70 rounded-full"},gt={class:"w-3/4 h-full mt-4 mb-12 text-center space-y-1 border-pop-primary border-t-2"},_t={key:0,class:"mt-6 text-secondary"},vt={key:1,class:"mt-6 text-secondary"},xt={key:0},bt=E({__name:"UserProfile",props:{user:{}},setup(e){return(t,n)=>(d(),p("div",ft,[o("div",pt,[t.user.picture?(d(),p("img",{key:0,src:t.user.picture,alt:"Profile Image",class:"w-full h-full object-cover"},null,8,mt)):J("",!0)]),o("h2",ht,C(t.user.name),1),o("p",yt,C(t.user.email),1),o("div",gt,[t.user.summary?(d(),p("div",_t,C(t.user.summary),1)):(d(),p("div",vt,[o("p",null,"@"+C(t.user.nickname)+" | 29 | Fr",1),n[1]||(n[1]=o("p",null,"WCIF friendly",-1)),t.user["sam.co/roles"]?(d(),p("p",xt,[n[0]||(n[0]=o("span",{class:"text-pop-primary"},"Roles: ",-1)),k(" "+C(t.user["sam.co/roles"]),1)])):J("",!0)]))]),n[2]||(n[2]=ke('<div class="flex w-full mt-4 p-4 justify-around text-pop-primary border-pop-primary border-t-2"><button class="hover:text-pop-primary"><i class="fas fa-envelope text-2xl"></i></button><button class="hover:text-pop-primary"><i class="fab fa-linkedin text-2xl"></i></button><button class="hover:text-pop-primary"><i class="fas fa-phone text-2xl"></i></button></div>',1))]))}}),wt={},St={class:"flex flex-col justify-center items-center"},kt={class:"w-full text-left"},$t={class:"text-3xl md:text-5xl font-bold text-pop-secondary leading-tight"},Ct={class:"text-lg md:text-2xl text-secondary/50"},Tt={class:"text-center"},At={class:"text-3xl md:text-5xl font-bold text-pop-secondary leading-tight"},Et={class:"w-full text-right"},Lt={class:"text-3xl md:text-5xl font-bold text-pop-secondary leading-tight"},Dt={class:"text-lg md:text-2xl text-secondary/50"},Ot={class:"md:mx-44 mt-6 p-6 text-center text-secondary text-xl"},Mt={class:""};function Nt(e,t){return d(),p("div",St,[o("div",kt,[o("h1",$t,[w(e.$slots,"titleLeft")]),o("h2",Ct,[w(e.$slots,"subTitleLeft")])]),o("div",Tt,[o("h1",At,[w(e.$slots,"titleCentered")])]),o("div",Et,[o("h1",Lt,[w(e.$slots,"titleRight")]),o("h2",Dt,[w(e.$slots,"subTitleRight")])]),o("div",Ot,[w(e.$slots,"description")]),o("div",Mt,[w(e.$slots,"content")])])}const X=he(wt,[["render",Nt]]),jt={class:"mt-24"},Rt={role:"list",class:"w-full grid grid-cols-1 sm:grid-cols-3 gap-x-6 gap-y-24 px-4 pt-24 pb-12 rounded-md"},Bt=E({__name:"Team",setup(e){const t=[{name:"Jane Cooper",nickName:void 0,email:"janecooper@example.com",summary:"Over 15 years of industy experience in Startup advisory",picture:"https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=4&w=256&h=256&q=60"},{name:"Cody Fisher",nickName:void 0,email:"cody.fisher@example.com",summary:"A masters in Data Science from UCL, and 8+ years of experience in the Health Care industy ",picture:"https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=4&w=256&h=256&q=60"},{name:"Esther Howard",nickName:void 0,email:"esther.howard@example.com",summary:"A masters in Computer Science from RWTH, and 10+ years of experience in the Software Engineering, full-stack application development, Web2, Web3 and Web4",picture:"https://images.unsplash.com/photo-1520813792240-56fc4a3765a7?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=4&w=256&h=256&q=60"}];return(n,s)=>(d(),p("div",jt,[v(X,null,{titleCentered:m(()=>s[0]||(s[0]=[k(" Meet Our Founding Team ")])),description:m(()=>s[1]||(s[1]=[k(" With expertise ranging from Startup Strategy, Data Science and Health, and Software Engineering, our Founding team is well positioned to realize this idea to its full potential. ")])),content:m(()=>[o("ul",Rt,[(d(),p(q,null,G(t,r=>o("li",{key:r.email,class:"flex flex-col p-2 divide-y divide-secondary rounded-md bg-pop-secondary shadow"},[v(bt,{user:r},null,8,["user"])])),64))])]),_:1})]))}}),Pt={class:"mt-24"},Wt={class:"col-span-3"},Vt={class:"flex flex-col p-4 divide-y divide-secondary rounded-md text-secondary/50 shadow"},Ft={class:"flex group"},It=E({__name:"Problem",setup(e){const t=[{summary:"19 million U.S. cancer patients receive $0 for their data, while corporations profit.",icon:"fa-solid fa-bed-pulse"},{summary:"42% of cancer patients deplete their life savings within two years of diagnosis.",icon:"fa-solid fa-piggy-bank"},{summary:"Life Sciences companies spend billions acquiring patient data – but most of it is obtained without direct patient consent.",icon:"fa-solid fa-handshake-slash"}];return(n,s)=>(d(),p("div",Pt,[v(X,null,{titleLeft:m(()=>s[0]||(s[0]=[k(" The Problem ")])),subTitleLeft:m(()=>s[1]||(s[1]=[k(" Cancer Patients Are the Backbone of a $50 Billion Data Market - But They Get Nothing. ")])),content:m(()=>[v(ye,null,{title:m(()=>s[2]||(s[2]=[])),subTitle:m(()=>s[3]||(s[3]=[])),description:m(()=>s[4]||(s[4]=[])),leftContent:m(()=>s[5]||(s[5]=[o("p",{class:"text-secondary text-xl"}," Every cancer patient's journey produces an enormous amount of valuable data - scans, lab results, genetic profiles, and treatment outcomes. This data fuels a $50+ billion global health data market, driving pharmaceutical breakthroughs and clinical advancements. ",-1)])),rightContent:m(()=>[o("div",Wt,[(d(),p(q,null,G(t,r=>o("div",Vt,[o("div",Ft,[o("i",{class:ae([r.icon,"text-3xl mx-4 text-pop-primary shrink-0"]),"aria-hidden":"true"},null,2),k(" "+C(r.summary),1)])])),64))])]),_:1})]),_:1})]))}}),zt={class:"flex flex-col h-full bg-primary/90 rounded-md"},Ht={class:"mt-6 text-left"},Ut={class:"flex flex-col gap-y-6 p-4 mt-4"},Jt={class:"text-xl font-bold text-secondary/90 border-b-2 border-secondary/80"},qt={class:"text-md text-secondary/70"},Gt=E({__name:"SolutionCard",props:{item:{}},setup(e){return(t,n)=>(d(),p("div",zt,[o("div",Ht,[o("i",{class:ae([t.item.icon,"text-5xl mx-4 text-pop-primary shrink-0"]),"aria-hidden":"true"},null,2)]),o("div",Ut,[o("p",Jt,C(t.item.title),1),o("p",qt,C(t.item.description),1)])]))}}),Qt={class:"mt-24"},Kt={role:"list",class:"grid grid-cols-1 md:grid-cols-4 gap-x-2 rounded-md"},Zt={class:"flex flex-col p-2 divide-y divide-secondary rounded-md shadow bg-pop-secondary"},Xt=E({__name:"Solution",setup(e){const t=[{title:"Patients Get Paid",description:"Cancer patients receive direct payments for their anonymized health data.",icon:"fa-solid fa-piggy-bank"},{title:"Seamless Payments",description:"Life Sciences companies pay traditionally; SiloLabs converts funds into stablecoins (USDC) for secure, automated micropayments.",icon:"fa-solid fa-building-columns"},{title:"Ethical & Transparent",description:"Blockchain ensures patient consent, security, and full traceability.",icon:"fa-solid fa-cubes"},{title:"Better Data for Research",description:"Life Sciences companies access verified, high-quality patient data to accelerate new treatments.",icon:"fa-solid fa-clipboard-list"}];return(n,s)=>(d(),p("div",Qt,[v(X,null,{titleRight:m(()=>s[0]||(s[0]=[k(" The Solution ")])),subTitleRight:m(()=>s[1]||(s[1]=[k(" SiloLabs: Empowering Cancer Patients to Monetize Their Data ")])),description:m(()=>s[2]||(s[2]=[k(" SiloLabs bridges traditional and decentralized finance, creating a fair, patient-first data economy leveraging blockchain technology so those in need finally benefit from the data they create. ")])),content:m(()=>[o("ul",Kt,[(d(),p(q,null,G(t,r=>o("li",Zt,[v(Gt,{item:r},null,8,["item"])])),64))])]),_:1})]))}}),Yt={class:"flex flex-col items-center"},tn=E({__name:"LandingPage",setup(e){const t=A(null),n=A(null),s=A(null),r=async a=>{var c,l,u;console.log("scrolling to",a),t.value=document.getElementById("team"),n.value=document.getElementById("problem"),s.value=document.getElementById("solution"),await K(),a==="team"?(c=t.value)==null||c.scrollIntoView({behavior:"smooth"}):a==="problem"?(l=n.value)==null||l.scrollIntoView({behavior:"smooth"}):a==="solution"&&((u=s.value)==null||u.scrollIntoView({behavior:"smooth"}))};return(a,c)=>(d(),p("div",Yt,[v(et,{"onScroll:to":r}),v(ut),v(Bt,{ref_key:"team",ref:t,id:"team"},null,512),v(It,{ref_key:"problem",ref:n,id:"problem"},null,512),v(Xt,{ref_key:"solution",ref:s,id:"solution"},null,512)]))}});export{tn as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
